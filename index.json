[{"content":"The dates next to some of the items represents the date in which I finished the book, movie or course.\nThis is a continuation of my 2023 yearbook. See the 2023 yearbook\nBooks Podcasts Youtube channels Newsletters ","permalink":"https://victoravelar.dev/articles/2024-yearbook/","summary":"\u003cp\u003e\u003cem\u003eThe dates next to some of the items represents the date in which I finished the book, movie or course.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is a continuation of my 2023 yearbook. \u003ca href=\"/articles/2023-yearbook/\"\u003eSee the 2023 yearbook\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"books\"\u003eBooks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"podcasts\"\u003ePodcasts\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"youtube-channels\"\u003eYoutube channels\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"newsletters\"\u003eNewsletters\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"2024 Yearbook"},{"content":"The dates next to some of the items represents the date in which I finished the book, movie or course.\nThis is a continuation of my 2022 yearbook. See the 2022 yearbook\nBooks Mindset by Dr. Carol Dweck - 06.01.2023 Javascript: The good parts by Douglas Crockford - 13.04.2023 Refactoring UI by Adam Whatan \u0026amp; Steve Schroger 18.06.2023 Engineering management for the rest of us by Sarah Drasner - 27.08.2023 Podcasts Lex Friedman - Podcast by Lex Friedman - 01.01.2023 The Wild Project by Jordi Wild - 01.01.2023 Huberman Lab by Andrew Huberman - 18.01.2023 Youtube channels Zack Star by Zach Start Quanta Magazine by Quanta Magazine Newsletters TL;DR by Dan Ni The Neuron Daily by Pete Frontend focus by Cooperpress JAMStacked by Cooperpress ","permalink":"https://victoravelar.dev/articles/2023-yearbook/","summary":"\u003cp\u003e\u003cem\u003eThe dates next to some of the items represents the date in which I finished the book, movie or course.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is a continuation of my 2022 yearbook. \u003ca href=\"/articles/2022-yearbook/\"\u003eSee the 2022 yearbook\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"books\"\u003eBooks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://amzn.eu/d/4c9dcSK\"\u003eMindset\u003c/a\u003e by \u003ca href=\"https://en.wikipedia.org/wiki/Carol_Dweck\"\u003eDr. Carol Dweck\u003c/a\u003e -\n06.01.2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://amzn.eu/d/f0uPoef\"\u003eJavascript: The good parts\u003c/a\u003e by \u003ca href=\"https://www.crockford.com/\"\u003eDouglas Crockford\u003c/a\u003e -\n13.04.2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.refactoringui.com/\"\u003eRefactoring UI\u003c/a\u003e by \u003ca href=\"https://adamwathan.me/\"\u003eAdam Whatan\u003c/a\u003e \u0026amp; \u003ca href=\"https://www.steveschoger.com/\"\u003eSteve Schroger\u003c/a\u003e\n18.06.2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.engmanagement.dev/\"\u003eEngineering management for the rest of us\u003c/a\u003e by \u003ca href=\"https://sarahdrasnerdesign.com/\"\u003eSarah Drasner\u003c/a\u003e -\n27.08.2023\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"podcasts\"\u003ePodcasts\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lexfridman.com/podcast/\"\u003eLex Friedman - Podcast\u003c/a\u003e by \u003ca href=\"https://lexfridman.com\"\u003eLex Friedman\u003c/a\u003e -\n01.01.2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCBYyJBCtCvgqA4NwtoPMwpQ\"\u003eThe Wild Project\u003c/a\u003e by \u003ca href=\"https://www.jordiwild.com/\"\u003eJordi Wild\u003c/a\u003e -\n01.01.2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hubermanlab.com/\"\u003eHuberman Lab\u003c/a\u003e by \u003ca href=\"https://profiles.stanford.edu/andrew-huberman\"\u003eAndrew Huberman\u003c/a\u003e -\n18.01.2023\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"youtube-channels\"\u003eYoutube channels\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@zachstar\"\u003eZack Star\u003c/a\u003e by \u003ca href=\"https://twitter.com/ImZachStar\"\u003eZach Start\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@QuantaScienceChannel\"\u003eQuanta Magazine\u003c/a\u003e by \u003ca href=\"https://www.quantamagazine.org/\"\u003eQuanta Magazine\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"newsletters\"\u003eNewsletters\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tldr.tech/\"\u003eTL;DR\u003c/a\u003e by \u003ca href=\"https://twitter.com/tldrdan\"\u003eDan Ni\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.theneurondaily.com/\"\u003eThe Neuron Daily\u003c/a\u003e by \u003ca href=\"https://twitter.com/nonmayorpete\"\u003ePete\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://frontendfoc.us/\"\u003eFrontend focus\u003c/a\u003e by \u003ca href=\"https://cooperpress.com/\"\u003eCooperpress\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jamstack.email/\"\u003eJAMStacked\u003c/a\u003e by \u003ca href=\"https://cooperpress.com/\"\u003eCooperpress\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"2023 Yearbook"},{"content":" The book comes with code samples using python, I did my best to rewrite most of them using golang.\nSome of the most complex exercises deserve its own article and I will try to do so.\nIf you find the notes interesting, you should consider getting a copy of the book.\n\u0026#x26a0;\u0026#xfe0f; This is a work in progress, you can expect the article to grow. Chapter 1 - Introduction An algorith is a set of instructions for accomplishing a task. Every piece of code could be called an algorithm.\nBinary Search Binary search is an algorithm that receives a sorted list as input (\u0026#x26a0;\u0026#xfe0f; binary search won\u0026rsquo;t work if the list is not sorted.) and a search subject. It returns the position in the list where the search subject is located.\n// This is go(ish) pseudo code. list := []int{5,10,15,20, 25} fmt.Println(binarySearch(list, 10)) // Output: 1 In general, for any list of size n, binary search will take log n steps to run in the worst case. In comparison, linear search will take n steps.\n\u0026#x1f4a1; When speaking about time/space complexity the logarithm is always base 2\nUsing it in go There are the three custom binary search functions: sort.SearchInts, sort.SearchStrings or sort.SearchFloat64s.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) func main() { list := []int{5,10,15,20, 25} fmt.Println(sort.SearchInts(list, 10)) } Go playground: https://go.dev/play/p/22tGiSz-z6D\n\u0026#x1f4a1; Go 1.18 and generics Starting from v1.18 generics support is available in Go, with this release also an experimental package arrived that offers a \u0026ldquo;general\u0026rdquo; binary search implementation for slices.\nIn the long run this implementation should replace the 3 functions available in v1.17 and before.\nSlice pkg: https://pkg.go.dev/golang.org/x/exp/slices#BinarySearch Binary search is an extract from the original implementation \u0026#x1f51d;\n// BinarySearch searches for target in a sorted slice and returns the smallest // index at which target is found. If the target is not found, the index at // which it could be inserted into the slice is returned; therefore, if the // intention is to find target itself a separate check for equality with the // element at the returned index is required. func BinarySearch[Elem constraints.Ordered](x []Elem, target Elem) int { return search(len(x), func(i int) bool { return x[i] \u0026gt;= target }) } // where search is defined as func search(n int, f func(int) bool) int { // Define f(-1) == false and f(n) == true. // Invariant: f(i-1) == false, f(j) == true. i, j := 0, n for i \u0026lt; j { h := int(uint(i+j) \u0026gt;\u0026gt; 1) // avoid overflow when computing h // i â‰¤ h \u0026lt; j if !f(h) { i = h + 1 // preserves f(i-1) == false } else { j = h // preserves f(j) == true } } // i == j, f(i-1) == false, and f(j) (= f(i)) == true =\u0026gt; answer is i. return i } --- // and then it can be used as follows list := []int{5,10,15,20,25} want := 10 if idx := BinarySearch(list, want); list[idx] == want { return idx } else { return nil } Running time Generally you want to choose the most efficient algorithm whether you\u0026rsquo;re optimizing for time or space.\nBig O It\u0026rsquo;s a special notation that tells you the rate in which the execution time or the necessary space grows.\n\u0026#x1f4a1; Big O notation is about the worst case-scenario.\nCommon notations are:\nO(1) or constant O(n) or linear O(n^2) or quadratic O(log n) or logarithmic O(2^n) or exponential O(n!) or factorial O(n log n) or linearithmic \u0026#x1f4cc; n == len(list)\nExample: Operations performed for lists of size 1, 8, 64, and 1024.\nBig O len(1) len(8) len(64) len(1024) O(1) 1 1 1 1 O(n) 1 8 64 1024 O(n^2) 1 64 4096 1048576 O(log n) 1 3 6 10 O(2^n) 1 256 1.8446744 x 10^19 1.797693134862315907729305190789 x 10^308 O(n!) 1 40320 1.2688693 X 10^89 infinity (too big to compute) O(n log n) 1 24 384 10240 Chapter 2 - Selection sort How memory works Each time you want to store something in memory, you need to ask the computer for some space, then you will get the address of the next available memory slot and you can store your information in there.\n// We are telling go to store 100 as a variable which will use memory space variable := 100 // If we want to get the address in memory for our variable we need to do this address := \u0026amp;variable println(address, variable) // outputs something like 0xc00003c768 100 Arrays and linked lists Linked lists A linked list contains a reference to the location of the next item in the list, this way a bunch of memory addresses can be linked together.\nExample:\na-\u0026gt;b-\u0026gt;c-\u0026gt;d-\u0026gt;null This feature allow items to be stored anywhere in memory, you can always reach them using the address stored in the list.\nArrays An array is a continous list stored in memory where you know the location and value of all items.\nExample:\n[]int{0,1,2,3,4} This forces an array to allocate continous space in memory leading to data relocation when more space is needed and no contigous space in memory is available.\nArrays vs Linked lists Arrays are great if you want to read random or non-contigous elements. Linked lists are great if you are going to read all the items one at a time. Terminology The elements in an array are numbered, most programming languages start with 0 and not 1. When you see a reference to an array element located at index 1 it is refering to the second element of the array and not the first one.\n\u0026#x1f4a1; The position of an element in an array is called index.\nThese are the run times for common operations on arrays and linked lists:\nArrays Lists Reading O(1) O(n) Insertion O(n) O(1) Insertions Whit lists it is easy to insert, you need to change the pointers to the next and current elements.\ntype node struct { Value int Next *node } root := node{10, nil} // Imagine we need to insert another node into our list root.Next = \u0026amp;node{5, nil} // Imagine we need to insert another node into our list root.Next = \u0026amp;node{5, nil} fmt.Printf(\u0026#34;root is %v and next is %v\\n\u0026#34;, root, root.Next) // Output: root is {10 0xc000108050} and next is \u0026amp;{5 \u0026lt;nil\u0026gt;} // Lets imagine now they asks us to insert a new node with value 8 after the first node. n := \u0026amp;node{8, nil} n.Next = root.Next root.Next = n fmt.Printf(\u0026#34;root is %v and next is %v, and next.Next is %v\u0026#34;, root, root.Next, root.Next.Next) // Output: root is {10 0xc000096260} and next is \u0026amp;{8 0xc000096230}, and next.Next is \u0026amp;{5 \u0026lt;nil\u0026gt;} Go playground: https://go.dev/play/p/V_zOwyM936O\nDeletions When it comes to deletions the situation doesn\u0026rsquo;t change much, lists are better, you just need to move the pointer and \u0026#x1f4a3; an item is off the list.\n// main() type node struct { Val int Next *node } root := \u0026amp;node{10, nil} root.Next = \u0026amp;node{9, nil} root.Next.Next = \u0026amp;node{8, nil} n := root for n != nil { fmt.Println(n.Val) n = n.Next } // Now let\u0026#39;s suppose we only want even numbers in our list, // so we need to remove the 9 root.Next = root.Next.Next n = root for n != nil { fmt.Println(n.Val) n = n.Next } Go playground: https://go.dev/play/p/HWwpT8tteu1\nWith arrays everything needs to be moved but unlike insertions deletions will always work.\n\u0026#x1f4a1; array insertions can fail when there is no more space in memory and the array cannot be dynamically extended.\n\u0026#x1f516; It is a common practice to keep track of the first and last element of a linked list, that way removing or inserting at the start / end of the list is always O(1).\nThere are two different types of access, random access and sequential access.\n\u0026#x1f4cc; Linked lists can only do sequential access\n\u0026#x1f4cc; Arrays are better if you need random access\n\u0026#x1f4a1; Random access means that you can inmmediatly jump to any point of the array.\narr := []int{1,2,3,4,5} // Random access to 4 arr[3] // prints 4 // With a list you will get sequential access: // Image the list above is represented using linked nodes: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;nil root.Next.Next.Next // prints 4 Common run time for operations on arrays and linked lists.\nArrays Lists Reading O(1) O(n) Writing O(n) 0(1) Deleting O(n) O(1) Selection sort Given a comparable value sort by picking the highest (desc) / lowest (asc) value and moving it to the righ position, this is know as in place sorting, do this until your list is sorted.\n// Sort the given array arr := []int{20,234,2,23,90,4} func selectionSort(list []int) []int { var n = len(list) for i := 0; i \u0026lt; n; i++ { var minIdx = i for j := i; j \u0026lt; n; j++ { if list[j] \u0026lt; list[minIdx] { minIdx = j } } list[i], list[minIdx] = list[minIdx], list[i] // See how the array changes on every pass. fmt.Println(list) } return list } // main() fmt.Println(selectionSort(arr)) Go playground: https://go.dev/play/p/FHhposwF6Nk\nChapter 3 - Recursion In computer science, recursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem.\nTo be able to write a recursive function, you need one or several base cases and one recursive case, in plain words this means that your function needs rules to know when to stop and what to do when those rules are not met.\nThe most famous example to practice recursion is creating a function that returns the nth number in Fibonnaci\u0026rsquo;s sequence:\nfunc nthFib(n int) int { // Initial base case, when the requested number is 0 we know // we don\u0026#39;t need to do any work. if n == 0 { return 0 } // Another base case: The first 2 fib numbers after 0 are 1 // 0 1 1 if n \u0026lt;=2 { return 1 } // Now we need to write our recursive case, we know the fib sequence is created // by adding the 2 previous numbers before the one you need. // // To illustrate, let\u0026#39;s calculate the first 5 fib numbers: // 0, 1, 1, 2, 3, 5. // From that example we visualize that the fifth fib number is creating by // adding the numbers at position 4 and 3, or 3 + 2. // Therefore we can create our recursive case by saying: return nthFib(n - 1) + nthFib(n - 2) // This code will always work because we now that in order to hit our recursive // case our n number needs to be \u0026gt; 0. } Go playground: https://go.dev/play/p/Y5Vdg6VcMUW\nThe stack A stack is a data structure where new information is pushed to the front of the stack and when you need to retrieve a workload, you will always take whatever is at the very top of the stack.\nExample:\n// considering we have push and read as functions and: // push adds information to the top of our stack while read // retrieves the record at the top, then. stack.push(1) stack.push(10) stack.push(7) println(stack.read()) // prints 7 Your computer performs processes using an internal stack knwon as the call stack, it will allocate a stack frame for every action it needs to perform.\nRecursion and the call stack Recursive functions leverage the internal call stack to avoid using additional data structures.\nImagine a function called factorial(int num) int that calculates the factorial value of the given number, to write it in a recursive way we do something like:\nfunc factorial(int num) int { // declare your base case if num == 1 { return 1 } // declare your recursive case return num * factorial(num - 1) } Let\u0026rsquo;s check how the call stack will be used to calculate the result of factorial(3)\non the stack I will use f to refer to factorial\nCode Stack factorial(3) f(3) factorial(2) f(3) -\u0026gt; f(2) factorial(1) f(3) -\u0026gt; f(2) -\u0026gt; f(1) (base case) = return 1 f(3) -\u0026gt; f(2) (2 * 1) = return 2 f(3) (3 * 2) = return 6 (empty) See how first the program performs three calls to factorial and then starts using the result to compute the subsequent still pending calls in the stack.\nAlternatives to stacks Write your code using loops You can use tail recursion (advanced) (not supported by all programming languages) ","permalink":"https://victoravelar.dev/articles/my-notes-on-grooking-algorithms/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThe book comes with code samples using python, I did my best to rewrite most of them using golang.\u003c/p\u003e\n\u003cp\u003eSome of the most complex exercises deserve its own article and I will try to do so.\u003c/p\u003e\n\u003cp\u003eIf you find the notes interesting, you should consider \u003ca href=\"https://www.manning.com/books/grokking-algorithms\"\u003egetting a copy of the book\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003ch3 id=\"warning-this-is-a-work-in-progress-you-can-expect-the-article-to-grow\"\u003e\u0026#x26a0;\u0026#xfe0f; This is a work in progress, you can expect the article to grow.\u003c/h3\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"chapter-1---introduction\"\u003eChapter 1 - Introduction\u003c/h1\u003e\n\u003cp\u003eAn algorith is a set of instructions for accomplishing a task. Every piece of code could be called an algorithm.\u003c/p\u003e","title":"My Notes on Grooking Algorithms"},{"content":"The list includes things that I consider important enough to require me to update the page. \u0026#x1f605;.\nThe dates next to some of the items represents the date in which I finished the book, movie or course.\nBooks Atomic Habits by James Clear - 30.01.2022 Grooking Algorithms by Aditya Y. Bahrgava via Manning - 13.03.2022 Math with Bad Drawings by Ben Orlin - 20.05.2022 Change is the only constant by Ben Orlin - 12.07.2022 The Math Book by Cliford A. Pickover - 22.09.2022 Cracking the Coding Interview by Gayle Laakmann McDowell - 08.12.2022 Podcasts Go Time Podcast by Changelog Media The Changelog by Changelog Media Pivot by The New York Magazine Ardan Labs Podcast by Ardan Labs Youtube Channels Coldfusion by Dagogo Altraide Bloomberg Quicktake by Bloomberg L.P. .cult by Honeypot - .cult dedicated website NoClip by NoClip TV Ardan Labs by Ardab Labs Newsletters Chunchbase daily by Crunchbase Golang Weekly by Cooperpress Laravel newsletter by Laravel news Stitcher.io by Brent GD ","permalink":"https://victoravelar.dev/articles/2022-yearbook/","summary":"\u003cp\u003eThe list includes things that I consider important enough to require me to update the page. \u0026#x1f605;.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe dates next to some of the items represents the date in which I finished the book, movie or course.\u003c/em\u003e\u003c/p\u003e\n\u003ch1 id=\"books\"\u003eBooks\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://jamesclear.com/atomic-habits\"\u003eAtomic Habits\u003c/a\u003e by \u003ca href=\"https://jamesclear.com\"\u003eJames Clear\u003c/a\u003e -\n30.01.2022\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.manning.com/books/grokking-algorithms\"\u003eGrooking Algorithms\u003c/a\u003e by \u003ca href=\"https://adit.io/\"\u003eAditya Y. Bahrgava via Manning\u003c/a\u003e -\n13.03.2022\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mathwithbaddrawings.com/\"\u003eMath with Bad Drawings\u003c/a\u003e by \u003ca href=\"https://www.linkedin.com/in/benjamin-orlin-9b0b0479/\"\u003eBen Orlin\u003c/a\u003e  -\n20.05.2022\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mathwithbaddrawings.com/2019/06/26/change-is-the-only-constant/\"\u003eChange is the only constant\u003c/a\u003e by \u003ca href=\"https://www.linkedin.com/in/benjamin-orlin-9b0b0479/\"\u003eBen Orlin\u003c/a\u003e -\n12.07.2022\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://books.google.de/books/about/The_Math_Book.html?id=JrslMKTgSZwC\u0026amp;redir_esc=y\"\u003eThe Math Book\u003c/a\u003e by \u003ca href=\"https://en.wikipedia.org/wiki/Clifford_A._Pickover\"\u003eCliford A. Pickover\u003c/a\u003e -\n22.09.2022\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.crackingthecodinginterview.com/\"\u003eCracking the Coding Interview\u003c/a\u003e by \u003ca href=\"https://www.gayle.com/\"\u003eGayle Laakmann McDowell\u003c/a\u003e -\n08.12.2022\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"podcasts\"\u003ePodcasts\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://changelog.com/gotime\"\u003eGo Time Podcast\u003c/a\u003e by \u003ca href=\"https://changelog.com/\"\u003eChangelog Media\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://changelog.com/podcast\"\u003eThe Changelog\u003c/a\u003e by \u003ca href=\"https://changelog.com/\"\u003eChangelog Media\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://podcasts.voxmedia.com/show/pivot\"\u003ePivot\u003c/a\u003e by \u003ca href=\"https://nymag.com/\"\u003eThe New York Magazine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5idXp6c3Byb3V0LmNvbS8xNDY2OTQ0LnJzcw==\"\u003eArdan Labs Podcast\u003c/a\u003e by \u003ca href=\"https://www.ardanlabs.com/\"\u003eArdan Labs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"youtube-channels\"\u003eYoutube Channels\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/c/ColdFusion\"\u003eColdfusion\u003c/a\u003e by \u003ca href=\"https://coldfusioncollective.com/\"\u003eDagogo Altraide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/BloombergTV\"\u003eBloomberg Quicktake\u003c/a\u003e by \u003ca href=\"https://www.bloomberg.com/qt\"\u003eBloomberg L.P.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/c/Honeypotio\"\u003e.cult\u003c/a\u003e by \u003ca href=\"https://honeypot.io\"\u003eHoneypot\u003c/a\u003e - \u003ca href=\"https://cult.honeypot.io/\"\u003e.cult dedicated website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/c/NoclipVideo\"\u003eNoClip\u003c/a\u003e by \u003ca href=\"https://www.noclip.video/\"\u003eNoClip TV\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCCgGRKeRM1b0LTDqqb4NqjA\"\u003eArdan Labs\u003c/a\u003e by \u003ca href=\"https://www.ardanlabs.com/\"\u003eArdab Labs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"newsletters\"\u003eNewsletters\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://news.crunchbase.com/daily/\"\u003eChunchbase daily\u003c/a\u003e by \u003ca href=\"https://news.crunchbase.com/daily/\"\u003eCrunchbase\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://golangweekly.com/\"\u003eGolang Weekly\u003c/a\u003e by \u003ca href=\"https://cooperpress.com/\"\u003eCooperpress\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://laravel-news.com/newsletter\"\u003eLaravel newsletter\u003c/a\u003e by \u003ca href=\"https://laravel-news.com/\"\u003eLaravel news\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stitcher.io/newsletter/subscribe\"\u003eStitcher.io\u003c/a\u003e by \u003ca href=\"https://twitter.com/brendt_gd\"\u003eBrent GD\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"2022 Yearbook"},{"content":"Hardware Mac Mini M2 2023 \u0026#x1f453; Macbook Pro 16\u0026rsquo; 2022 \u0026#x1f4bc; Thinkpad X1 Carbon 2020 \u0026#x1f3ae; Samsung Odyssey G9 \u0026#x1f4bb; Amazon Kindle Scribe \u0026#x1f4d6; Logitech MX Ergonomic Vertical Mouse Keychron K8 Yeti Blue Condenser Mic. Logitech C920s HD PRO Webcam Nintendo Switch OLED \u0026#x1f3ae; Nitento Switch PRO controller \u0026#x1f3ae; Playstation 5 - Disk edition \u0026#x1f3ae; Google Pixel 7 Pixel Buds PRO \u0026#x1f3c3; Bose 700 Software Coding Visual Studio Code Warp PHPStorm Laravel Idea Website Hugo Github Pages Porkbun Cloudfare Apps and Services Obsidian Youtube Premium NordVPN Nordpass Warp ","permalink":"https://victoravelar.dev/uses/","summary":"Stuff that I use","title":"Things I use"}]